generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LCL_DB__CONNECTION")
}

model User {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")

  passwordHash String        @map("password_hash")
  email        String        @unique
  roles        String[]      @default([])
  sessions     UserSession[]

  orgMembers    OrgMember[]
  projectMembers ProjectMember[]

  @@map("user")
}

model UserSession {
  id        String   @id
  expiresAt DateTime @map("expires_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("user_session")
}

model Organisation {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")

  name String
  description String?

  projects Project[]
  members  OrgMember[]

  @@map("organisation")
}

model OrgMember {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")

  org    Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId  String       @map("org_id")
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String       @map("user_id")

  roles String[] @default([])

  @@map("org_member")
}

model Project {
  id        String       @id
  createdAt DateTime     @default(now()) @map("created_at")
  org       Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId     String       @map("org_id")

  name    String
  description String?
  members ProjectMember[]

  @@map("project")
}

model ProjectMember {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")

  roles String[] @default([])

  @@map("project_member")
}
